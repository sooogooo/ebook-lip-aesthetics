//Advanced Service Worker with Multiple Caching Strategies const CACHE_VERSION='v2.0.0';const CACHE_NAMES={STATIC:`static-${CACHE_VERSION}`,DYNAMIC:`dynamic-${CACHE_VERSION}`,IMAGES:`images-${CACHE_VERSION}`,MODELS:`3d-models-${CACHE_VERSION}`,API:`api-${CACHE_VERSION}`,FONTS:`fonts-${CACHE_VERSION}`};const STATIC_ASSETS=['/','/index.html','/visualization_hub.html','/medical_dashboard.html','/enhanced_3d_anatomy.html','/un if ied_styles.min.css','/integration.min.js','/man if est.json'];const CACHE_LIMITS={IMAGES:50,DYNAMIC:30,API:20,MODELS:10};const CACHE_EXPIRATION={STATIC:7*24*60*60,DYNAMIC:24*60*60,IMAGES:30*24*60*60,MODELS:60*24*60*60,API:5*60,FONTS:365*24*60*60};self.addEventListener('install',(event)=>{event.waitUntil(caches.open(CACHE_NAMES.STATIC).then(cache=>{console.log('[SW]Caching static assets');return cache.addAll(STATIC_ASSETS);}).then(()=>self.skipWaiting()).catch(error=>{console.error('[SW]Installation failed:',error);}));});self.addEventListener('activate',(event)=>{event.waitUntil(caches.keys().then(cacheNames=>{return Promise.all(cacheNames .filter(cacheName=>{return!Object.values(CACHE_NAMES).includes(cacheName);}).map(cacheName=>{console.log('[SW]De let ing old cache:',cacheName);return caches.de let e(cacheName);}));}).then(()=>self.clients.claim()));});self.addEventListener('fetch',(event)=>{const{request}=event;const url=new URL(request.url);if(!url.protocol.startsWith('http')){return;}if(request.method==='GET'){let responsePromise;if(isStaticAsset(url)){responsePromise=cacheFirst(request,CACHE_NAMES.STATIC);}else if(isImage(url)){responsePromise=cacheFirst(request,CACHE_NAMES.IMAGES);}else if(is3DModel(url)){responsePromise=cacheFirst(request,CACHE_NAMES.MODELS);}else if(isFont(url)){responsePromise=cacheFirst(request,CACHE_NAMES.FONTS);}else if(isAPI(url)){responsePromise=networkFirst(request,CACHE_NAMES.API);}else{responsePromise=staleWhileRevalidate(request,CACHE_NAMES.DYNAMIC);}event.respondWith(responsePromise);}});async function cacheFirst(request,cacheName){const cache=await caches.open(cacheName);const cached=await cache.match(request);if(cached&&!isExpired(cached,cacheName)){console.log('[SW]Cache hit:',request.url);return cached;}try{const response=await fetch(request);if(response.ok){const responseClone=response.clone();cache.put(request,addTimestamp(responseClone));await trimCache(cacheName);}return response;}catch(error){console.error('[SW]Fetch failed:',error);return cached||createOfflineResponse();}}async function networkFirst(request,cacheName){try{const response=await fetchWithTimeout(request,5000);if(response.ok){const cache=await caches.open(cacheName);cache.put(request,addTimestamp(response.clone()));await trimCache(cacheName);}return response;}catch(error){console.log('[SW]Network failed,trying cache:',request.url);const cached=await caches.match(request);return cached||createOfflineResponse();}}async function staleWhileRevalidate(request,cacheName){const cache=await caches.open(cacheName);const cached=await cache.match(request);const fetchPromise=fetch(request).then(response=>{if(response.ok){cache.put(request,addTimestamp(response.clone()));trimCache(cacheName);}return response;}).catch(()=>cached||createOfflineResponse());return cached||fetchPromise;}function isStaticAsset(url){return/\.(css|js)$/.test(url.pathname)&&url.pathname.includes('.min.');}function isImage(url){return/\.(png|jpg|jpeg|gif|webp|svg|ico)$/i.test(url.pathname);}function is3DModel(url){return/\.(gltf|glb|obj|mtl|fbx|dae|3ds|ply|stl)$/i.test(url.pathname);}function isFont(url){return/\.(woff|woff2|ttf|otf|eot)$/i.test(url.pathname)||url.hostname.includes('fonts.googleapis.com')||url.hostname.includes('fonts.gstatic.com');}function isAPI(url){return url.pathname.startsWith('/api/')||url.hostname.includes('api.')||url.pathname.includes('/data/');}function addTimestamp(response){const headers=new Headers(response.headers);headers.append('sw-cache-timestamp',Date.now().toString());return new Response(response.body,{status:response.status,statusText:response.statusText,headers:headers});}function isExpired(response,cacheName){const timestamp=response.headers.get('sw-cache-timestamp');if(!timestamp)return false;const age=(Date.now()-parseInt(timestamp))/1000;const maxAge=CACHE_EXPIRATION[cacheName.split('-')[0].toUpperCase()]||CACHE_EXPIRATION.DYNAMIC;return age>maxAge;}async function trimCache(cacheName){const cache=await caches.open(cacheName);const keys=await cache.keys();const cacheType=cacheName.split('-')[0].toUpperCase();const limit=CACHE_LIMITS[cacheType];if(limit&&keys.length>limit){const toDe let e=keys.slice(0,keys.length-limit);await Promise.all(toDe let e.map(key=>cache.de let e(key)));console.log(`[SW]Trimmed ${toDe let e.length}items from ${cacheName}`);}}function fetchWithTimeout(request,timeout=5000){return Promise.race([fetch(request),new Promise((_,reject)=>setTimeout(()=>reject(new Error('Fetch timeout')),timeout))]);}function createOfflineResponse(){return new Response(JSON.string if y({error:'Offline',message:'The application is currently offline. Please check your connection.'}),{status:503,statusText:'Service Unavailable',headers:new Headers({'Content-Type':'application/json'})});}self.addEventListener('sync',(event)=>{if(event.tag==='sync-data'){event.waitUntil(syncOfflineData());}});async function syncOfflineData(){console.log('[SW]Syncing offline data');}self.addEventListener('push',(event)=>{const options={body:event.data?event.data.text():'New update available',icon:'/icon-192.png',badge:'/badge-72.png',vibrate:[200,100,200],data:{dateOfArrival:Date.now(),primaryKey:1},actions:[{action:'explore',title:'Open App'},{action:'close',title:'Close'}]};event.waitUntil(self.registration.showNot if ication('Lips Aesthetics',options));});self.addEventListener('not if icationclick',(event)=>{event.not if ication.close();if(event.action==='explore'){event.waitUntil(clients.openWindow('/'));}});self.addEventListener('message',(event)=>{if(event.data.type==='SKIP_WAITING'){self.skipWaiting();}else if(event.data.type==='CLEAR_CACHE'){event.waitUntil(caches.keys().then(cacheNames=>Promise.all(cacheNames.map(cacheName=>caches.de let e(cacheName)))));}else if(event.data.type==='CACHE_URLS'){event.waitUntil(caches.open(CACHE_NAMES.DYNAMIC).then(cache=>cache.addAll(event.data.urls)));}});let per for manceData={cacheHits:0,cacheMisses:0,fetchErrors:0};setInterval(()=>{self.clients.matchAll().then(clients=>{clients.forEach(client=>{client.postMessage({type:'PERFORMANCE_DATA',data:per for manceData});});});per for manceData={cacheHits:0,cacheMisses:0,fetchErrors:0};},60000);console.log('[SW]Service Worker v2.0.0 loaded');